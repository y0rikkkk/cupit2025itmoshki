import json

# –ù–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±—ä–µ–∫—Ç–æ–≤
station_type_labels = {
    "train_station": "üöâ –í–æ–∫–∑–∞–ª—ã",
    "platform": "üèÅ –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã",
    "bus_station": "üöå –ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª—ã",
    "bus_stop": "üõë –ê–≤—Ç–æ–±—É—Å–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
    "airport": "üõ´ –ê—ç—Ä–æ–ø–æ—Ä—Ç—ã",
    "station": "üöâ –°—Ç–∞–Ω—Ü–∏–∏ (–¥—Ä—É–≥–∏–µ)",
    "water": "‚õ¥ –í–æ–¥–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
    "unknown": "‚ùì –ü—Ä–æ—á–µ–µ",
    "region": "üåç –†–µ–≥–∏–æ–Ω—ã",
    "settlement": "üèô –ì–æ—Ä–æ–¥–∞",
    "country": "üó∫ –°—Ç—Ä–∞–Ω—ã"
}


class StationFinder:
    def __init__(self, json_path):
        with open(json_path, "r", encoding="utf-8") as f:
            self.raw_data = json.load(f)
        self.index = self._build_index()

    def _build_index(self):
        index = {}
        for country in self.raw_data.get("countries", []):
            country_title = country.get("title")
            for region in country.get("regions", []):
                region_title = region.get("title")
                for settlement in region.get("settlements", []):
                    settlement_title = settlement.get("title")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
                    self._add_to_index(index, settlement_title, {
                        "title": settlement_title,
                        "settlement": settlement_title,
                        "region": region_title,
                        "country": country_title,
                        "code": settlement.get("codes", {}).get("yandex_code"),
                        "station_type": "settlement"
                    })

                    for station in settlement.get("stations", []):
                        station_title = station.get("title", "").strip()
                        code = station.get("codes", {}).get("yandex_code")
                        station_type = station.get("station_type") or "unknown"

                        if station_title and code:
                            self._add_to_index(index, station_title, {
                                "title": station_title,
                                "settlement": settlement_title,
                                "region": region_title,
                                "country": country_title,
                                "code": code,
                                "station_type": station_type
                            })

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω
                self._add_to_index(index, region_title, {
                    "title": region_title,
                    "settlement": "",
                    "region": region_title,
                    "country": country_title,
                    "code": region.get("codes", {}).get("yandex_code"),
                    "station_type": "region"
                })

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É
            self._add_to_index(index, country_title, {
                "title": country_title,
                "settlement": "",
                "region": "",
                "country": country_title,
                "code": country.get("codes", {}).get("yandex_code"),
                "station_type": "country"
            })

        return index

    def _add_to_index(self, index, key, data):
        key = key.strip().lower()
        index.setdefault(key, []).append(data)

    def search(self, partial_query):
        partial = partial_query.strip().lower()
        results = []

        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        for name, stations in self.index.items():
            if partial in name:
                results.extend(stations)

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: –¥–æ–±–∞–≤–∏–º –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö settlement == partial
        for station_list in self.index.values():
            for station in station_list:
                if (
                    station["station_type"] == "airport"
                    and station.get("settlement", "").strip().lower() == partial
                    and station not in results
                ):
                    results.append(station)

        return results

    def interactive_lookup(self):
        while True:
            query = input("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏ (–∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
            if query.lower() in ('–≤—ã—Ö–æ–¥', 'exit', 'q'):
                break

            code = self._lookup_single_station(query)
            if code:
                print(f"\n‚úÖ –ö–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏: {code}\n")

    def _lookup_single_station(self, query):
        matches = self.search(query)
        if not matches:
            print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return None

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É —Å—Ç–∞–Ω—Ü–∏–∏
        grouped = {}
        for s in matches:
            grouped.setdefault(s['station_type'], []).append(s)

        # –í—ã–≤–æ–¥
        numbered = []
        index = 1
        for stype in sorted(grouped, key=self._station_sort_priority):
            label = station_type_labels.get(stype, stype)
            print(f"\n=== {label} ===")
            for s in grouped[stype]:
                loc = ", ".join(filter(None, [s['settlement'], s['region'], s['country']]))
                print(f"{index}. {s['title']} ‚Äî {loc} ({label})")
                numbered.append(s)
                index += 1

        try:
            selection = int(input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏: "))
            selected = numbered[selection - 1]
            return selected['code']
        except (ValueError, IndexError):
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n")
            return None

    def lookup_from_to(self):
        print("\nüîé –ü–æ–∏—Å–∫ —Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        from_code = None
        while not from_code:
            query = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ")
            if query.lower() in ("–≤—ã—Ö–æ–¥", "exit", "q"):
                return None, None
            from_code = self._lookup_single_station(query)

        print("\nüîé –ü–æ–∏—Å–∫ —Ç–æ—á–∫–∏ –ø—Ä–∏–±—ã—Ç–∏—è:")
        to_code = None
        while not to_code:
            query = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –ø—Ä–∏–±—ã—Ç–∏—è: ")
            if query.lower() in ("–≤—ã—Ö–æ–¥", "exit", "q"):
                return None, None
            to_code = self._lookup_single_station(query)

        return from_code, to_code

    def _station_sort_priority(self, station_type):
        # –ß–µ–º –º–µ–Ω—å—à–µ —á–∏—Å–ª–æ ‚Äî —Ç–µ–º –≤—ã—à–µ –≤ —Å–ø–∏—Å–∫–µ
        priorities = {
            "settlement": 1,
            "train_station": 3,
            "airport": 2,
            "bus_station": 4,
            "platform": 5,
            "station": 6,
            "bus_stop": 7,
            "region": 8,
            "country": 9,
            "unknown": 99,
        }
        return priorities.get(station_type, 99)