import json

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
transport_priority = {
    "train": 1,
    "suburban": 2,
    "plane": 3,
    "bus": 4,
    "water": 5,
    "unknown": 99
}

# –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏
transport_labels = {
    "train": "üöÜ –ü–æ–µ–∑–¥–∞",
    "suburban": "üöâ –ü—Ä–∏–≥–æ—Ä–æ–¥–Ω—ã–µ",
    "plane": "‚úàÔ∏è –°–∞–º–æ–ª—ë—Ç—ã",
    "bus": "üöå –ê–≤—Ç–æ–±—É—Å—ã",
    "water": "‚õ¥ –í–æ–¥–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
    "unknown": "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
}


class StationFinder:
    def __init__(self, json_path):
        with open(json_path, "r", encoding="utf-8") as f:
            self.raw_data = json.load(f)
        self.index = self._build_index()

    def _build_index(self):
        index = {}
        for country in self.raw_data.get("countries", []):
            for region in country.get("regions", []):
                for settlement in region.get("settlements", []):
                    for station in settlement.get("stations", []):
                        name = station.get("title", "").strip().lower()
                        code = station.get("codes", {}).get("yandex_code")
                        if name and code:
                            index.setdefault(name, []).append({
                                "station": station.get("title"),
                                "settlement": settlement.get("title"),
                                "region": region.get("title"),
                                "country": country.get("title"),
                                "code": code,
                                "type": station.get("transport_type") or "unknown"
                            })
        return index

    def search(self, partial_query):
        partial = partial_query.strip().lower()
        results = []
        for name, stations in self.index.items():
            if partial in name:
                results.append((name, stations))
        return results

    def interactive_lookup(self):
        while True:
            query = input("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏ (–∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
            if query.lower() in ('–≤—ã—Ö–æ–¥', 'exit', 'q'):
                break

            matches = self.search(query)
            if not matches:
                print("‚ùå –°—Ç–∞–Ω—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                continue

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
            all_options = []
            for _, station_list in matches:
                all_options.extend(station_list)

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            all_options.sort(key=lambda s: (transport_priority.get(s['type'], 99), s['station']))

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
            print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ {len(all_options)} —Å—Ç–∞–Ω—Ü–∏–π:\n")
            grouped = {}
            for s in all_options:
                t = s['type']
                grouped.setdefault(t, []).append(s)

            # –ü—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            numbered = []
            index = 1
            for t_type in sorted(grouped, key=lambda t: transport_priority.get(t, 99)):
                label = transport_labels.get(t_type, t_type)
                print(f"\n=== {label} ===")
                for s in grouped[t_type]:
                    print(f"{index}. {s['station']} ‚Äî {s['settlement']}, {s['region']}, {s['country']}")
                    numbered.append(s)
                    index += 1

            # –í—ã–±–æ—Ä
            try:
                selection = int(input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏: "))
                selected = numbered[selection - 1]
                print(f"\n‚úÖ –ö–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏: {selected['code']}\n")
            except (ValueError, IndexError):
                print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n")