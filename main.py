import json
import requests
from parser import parse_route
from station_finder import StationFinder
from ObjectClasses import select_date,Trip
import locale
from filters import build_api_params,filter_by_transfer_duration_range,filter_by_non_working_hours,sort_by_duration,sort_by_arrival_time,sort_by_departure_time

yandex_api_key = '6833833d-d478-4dca-bae0-e0b11d870ecb'
locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')

finder = StationFinder('stations_list.json')
station_from,station_to = finder.lookup_from_to()

# –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
date = select_date()

#'—ç—Ç–æ —è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ª–∞–¥–∫–∏ —é–∑–∞–ª, —Å—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫-–ª–æ—Å–µ–≤–æ
# station_from = 'c11116'
# station_to = 'c43621'
# date ='2025-03-20'

url = 'https://api.rasp.yandex.net/v3.0/search/'

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
base_params = {
    'apikey': yandex_api_key,
    'format': 'json',
    'from': station_from,
    'to': station_to,
    'lang': 'ru_RU',
    'date': date,
    'transfers':True,
}

# üöá –í—ã–±–æ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
print("""–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ ‚Äî –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º):
  ‚úàÔ∏è plane
  üöÜ train
  üöà suburban
  üöå bus
  ‚õ¥ water
  üöÅ helicopter
""")
types_input = input("–¢–∏–ø—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: ").strip()
transport_types = [t.strip() for t in types_input.split(',') if t.strip()] if types_input else []

# üö´ –ü—Ä—è–º—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
print("–•–æ—Ç–∏—Ç–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã? (y/n)")
direct_only = input().strip().lower() == 'y'

user_filters = {
    'transport_types': transport_types,  # –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ = –≤—Å–µ —Ç–∏–ø—ã
    'direct_only': direct_only
}

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Å–∞–¥–æ–∫
if user_filters['direct_only'] == False:
    print("–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Å–∞–¥–æ–∫ –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10-90, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–∞–¥–∫–∞ - 1 —á–∞—Å):")
    transfer_input = input("–ò–Ω—Ç–µ—Ä–≤–∞–ª: ").strip()

    transfer_min, transfer_max = 3600, 99999  # –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try:
        transfer_min, transfer_max = [int(x) * 60 for x in transfer_input.split('-')]
    except:
        print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º.")



print("‚ùì –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –º–∞—Ä—à—Ä—É—Ç—ã –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–¥–æ 10:00 –∏ –ø–æ—Å–ª–µ 18:00)? (y/n)")
only_non_working = input().strip().lower() == 'y'



params = build_api_params(base_params, user_filters)
# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ GET-–∑–∞–ø—Ä–æ—Å–∞
response = requests.get(url, params=params)
parsed = response.json()


if response.status_code == 200:
    data = response.json()
else:
    print(parsed)

routes = [parse_route(seg) for seg in data.get('segments', [])]
if user_filters['direct_only'] == False:
    routes = filter_by_transfer_duration_range(routes, transfer_min, transfer_max)
if only_non_working:
    routes = filter_by_non_working_hours(routes)


print("""–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤:
1 ‚Äî –ü–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
2 ‚Äî –ü–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è
3 ‚Äî –ü–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏
–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
""")
sort_choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip()

if sort_choice == '1':
    routes = sort_by_departure_time(routes)
elif sort_choice == '2':
    routes = sort_by_arrival_time(routes)
elif sort_choice == '3':
    routes = sort_by_duration(routes)

for route in routes:
    print(route.pretty_print())
    print("="*40)

